{
  "contractName": "ComicAccount",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "uploader",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_uploader",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.12+commit.7709ece9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_uploader\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uploader\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/uchimuraseita/go/src/github.com/jphacks/TK_1907/smart-contract/contracts/ComicAccount.sol\":\"ComicAccount\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"/Users/uchimuraseita/go/src/github.com/jphacks/TK_1907/smart-contract/contracts/ComicAccount.sol\":{\"keccak256\":\"0x49280cc01e87d0faff1e023a633f9659e0fa7a238ea5cea2b233111e179da6b7\",\"urls\":[\"bzz-raw://672fd85cc0ea3f59fcb20b6ac88503dd97fe3c6e71ad04f50f044aa54232bc91\",\"dweb:/ipfs/QmbwJmE8M5x4S6rK44jxvaETyuBJYL3KSEqhPjGz2272Fx\"]}},\"version\":1}",
  "bytecode": "0x60806040526000805460ff1916905534801561001a57600080fd5b506101fa8061002a6000396000f3fe6080604052600436106100345760003560e01c8063158ef93e1461003657806365fe2a0b1461005f578063c4d66de81461009d575b005b34801561004257600080fd5b5061004b6100dd565b604080519115158252519081900360200190f35b34801561006b57600080fd5b506100746100e6565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156100a957600080fd5b50610034600480360360208110156100c057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610107565b60005460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60005460ff1615610163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061019b602b913960400191505060405180910390fd5b6000805460ff191660011781556040517f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c89190a15056fe5468697320636f6e74726163742068617320616c7265616479206265656e20696e697469616c697a65642ea265627a7a723158205e26719b13ac7f05ef40b2fa8c7ce1cb4f27c304812fed0387b288e298d5bf6264736f6c634300050c0032",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c8063158ef93e1461003657806365fe2a0b1461005f578063c4d66de81461009d575b005b34801561004257600080fd5b5061004b6100dd565b604080519115158252519081900360200190f35b34801561006b57600080fd5b506100746100e6565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156100a957600080fd5b50610034600480360360208110156100c057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610107565b60005460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60005460ff1615610163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061019b602b913960400191505060405180910390fd5b6000805460ff191660011781556040517f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c89190a15056fe5468697320636f6e74726163742068617320616c7265616479206265656e20696e697469616c697a65642ea265627a7a723158205e26719b13ac7f05ef40b2fa8c7ce1cb4f27c304812fed0387b288e298d5bf6264736f6c634300050c0032",
  "sourceMap": "25:8325:0:-;;;79:5;53:31;;-1:-1:-1;;53:31:0;;;147:23;5:2:-1;;;;30:1;27;20:12;5:2;147:23:0;25:8325;;;;;;",
  "deployedSourceMap": "25:8325:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;53:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;53:31:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;88;;8:9:-1;5:2;;;30:1;27;20:12;5:2;88:31:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;306:759;;8:9:-1;5:2;;;30:1;27;20:12;5:2;306:759:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;306:759:0;;;;:::i;53:31::-;;;;;;:::o;88:::-;;;;;;;;;:::o;306:759::-;375:11;;;;374:12;366:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1018:11;:18;;-1:-1:-1;;1018:18:0;1032:4;1018:18;;;1047:13;;;;1018:11;1047:13;306:759;:::o",
  "source": "pragma solidity 0.5.12;\n\ncontract ComicAccount  {\n\n  bool public initialized = false;\n  address payable public uploader;\n  event Initialized();\n\n  constructor() public {}\n\n  // The fallback function for this contract.\n  function() external payable {\n    // TODO 収益分配のロジックを書く\n  }\n\n  function initialize(address payable _uploader) public {\n    require(!initialized, \"This contract has already been initialized.\");\n\n    //address zeroAddress = address(0);\n    _uploader;\n\n    //for (uint i = 0; i < _owners.length; i++) {\n      //require(_owners[i] != zeroAddress, \"Owner address cannot be zero address.\");\n      //require(!owners[_owners[i]], \"Owners must be different address.\");\n      //owners[_owners[i]] = true;\n    //}\n\n    //// TODO MofNの順序を考えて直感的なvalidationをかける\n    //require(_signerNum > 0, \"SignerNum has to be greater than zero.\");\n    //require(_signerNum <= _owners.length, \"SignerNum cannot be greater than owners.\");\n    //signerNum = _signerNum;\n\n    initialized = true;\n    emit Initialized();\n  }\n\n  // Generates the message to sign given the output destination address and amount.\n  // includes this contract's address and a nonce for replay protection.\n  // One option to independently verify:\n  //     https://leventozturk.com/engineering/sha3/ and select keccak\n  //function generateMessageToSign(\n    //address _destination,\n    //uint256 _value,\n    //address _tokenAddress,\n    //uint256 _nonce\n  //)\n  //public view returns (bytes32)\n  //{\n    //require(_destination != address(this), \"Destination cannot be this contract.\");\n\n    //bytes32 message = keccak256(\n      //abi.encodePacked(\n        //this,\n        //_destination,\n        //_value,\n        //_tokenAddress,\n        //_nonce\n      //)\n    //);\n    //return message;\n  //}\n\n  //// generate message for ERC721\n  //function generateMessageToSign(\n    //address _destination,\n    //address _tokenAddress,\n    //uint256 _tokenId,\n    //uint256 _nonce\n  //)\n  //public view returns (bytes32)\n  //{\n    //require(_destination != address(this), \"Destination cannot be this contract.\");\n\n    //bytes32 message = keccak256(\n      //abi.encodePacked(\n        //this,\n        //_destination,\n        //_tokenAddress,\n        //_tokenId,\n        //_nonce\n      //)\n    //);\n    //return message;\n  //}\n\n  //// Send the given amount of ETH to the given destination using\n  //// the two triplets (v1, r1, s1) and (v2, r2, s2) as signatures.\n  //// s1 and s2 should be 0x00 or 0x01 corresponding to 0x1b and 0x1c respectively.\n  //function spend(\n    //address payable _destination,\n    //uint256 _value,\n    //address _tokenAddress,\n    //uint8[] memory _v,\n    //bytes32[] memory _r,\n    //bytes32[] memory _s\n  //)\n  //public\n  //{\n    //// This require is handled by generateMessageToSign()\n    //// require(destination != address(this));\n    //require(\n      //_validSignature(\n        //_destination,\n        //_value,\n        //_tokenAddress,\n        //_v, _r, _s\n    //),\n    //\"Invalid signature.\");\n    //spendNonce = spendNonce + 1;\n\n    //if(_tokenAddress == ETH_ADDRESS) {\n      //require(address(this).balance >= _value, \"Insufficient balance to send.\");\n      //(bool success, bytes memory _) = _destination.call.value(_value).gas(10000)(\"\");\n      //require(success, \"Ether transfer failed.\");\n      //_;\n    //} else {\n      //ERC20Interface instance = ERC20Interface(_tokenAddress);\n      //require(instance.transfer(_destination, _value), \"Token transfer failed.\");\n    //}\n    //emit Spent(_destination, _value, _tokenAddress);\n  //}\n\n\n  //// Send the given amount of ETH to the given destination using\n  //// the two triplets (v1, r1, s1) and (v2, r2, s2) as signatures.\n  //// s1 and s2 should be 0x00 or 0x01 corresponding to 0x1b and 0x1c respectively.\n  //function spend(\n    //address payable _destination,\n    //address _tokenAddress,\n    //uint256  _tokenId,\n    //uint8[] memory _v,\n    //bytes32[] memory _r,\n    //bytes32[] memory _s\n  //)\n  //public\n  //{\n    //// This require is handled by generateMessageToSign()\n    //// require(destination != address(this));\n    //require(\n      //_validSignature(\n        //_destination,\n        //_tokenAddress,\n        //_tokenId,\n        //_v, _r, _s\n    //),\n    //\"Invalid signature.\");\n    //spendNonce = spendNonce + 1;\n\n    //ERC721Interface instance = ERC721Interface(_tokenAddress);\n    //instance.safeTransferFrom(address(this), _destination, _tokenId);\n\n    //emit Spent(_destination, _tokenAddress, _tokenId);\n  //}\n\n  //// Confirm that the two signature triplets (v1, r1, s1) and (v2, r2, s2)\n  //// both authorize a spend of this contract's funds to the given\n  //// destination address.\n  //function _validSignature(\n    //address _destination,\n    //uint256 _value,\n    //address _tokenAddress,\n    //uint8[] memory _v,\n    //bytes32[] memory _r,\n    //bytes32[] memory _s\n  //)\n  //private returns (bool)\n  //{\n    //bytes32 message = _messageToRecover(_destination, _value, _tokenAddress);\n\n    //require(_v.length == signerNum &&\n            //_r.length == signerNum &&\n            //_s.length == signerNum,\n    //\"Message was not signed by enough number of signers.\");\n\n    //address[] memory addrs = new address[](signerNum);\n    //for (uint i = 0; i < signerNum; i++) {\n      //addrs[i] = ecrecover(\n        //message,\n        //_v[i], _r[i], _s[i]\n      //);\n    //}\n\n    //require(_distinctOwners(addrs), \"Signing owners must be different.\");\n\n    //return true;\n  //}\n\n  //function _validSignature(\n    //address _destination,\n    //address _tokenAddress,\n    //uint256 _tokenId,\n    //uint8[] memory _v,\n    //bytes32[] memory _r,\n    //bytes32[] memory _s\n  //)\n  //private returns (bool)\n  //{\n    //bytes32 message = _messageToRecover(_destination, _tokenAddress, _tokenId);\n\n    //require(_v.length == signerNum &&\n            //_r.length == signerNum &&\n            //_s.length == signerNum,\n    //\"Message was not signed by enough number of signers.\");\n\n    //address[] memory addrs = new address[](signerNum);\n    //for (uint i = 0; i < signerNum; i++) {\n      //addrs[i] = ecrecover(\n        //message,\n        //_v[i], _r[i], _s[i]\n      //);\n    //}\n\n    //require(_distinctOwners(addrs), \"Signing owners must be different.\");\n\n    //return true;\n  //}\n\n\n  //// Generate the the unsigned message (in bytes32) that each owner's\n  //// wallet would have signed for the given destination and amount.\n  ////\n  //// The generated message from generateMessageToSign is converted to\n  //// ascii when signed by a trezor.\n  ////\n  //// The required signing prefix, the length of this\n  //// unsigned message, and the unsigned ascii message itself are\n  //// then concatenated and hashed with keccak256.\n  //function _messageToRecover(\n    //address _destination,\n    //uint256 _value,\n    //address _tokenAddress\n  //)\n  //private view returns (bytes32)\n  //{\n    //bytes32 hashedUnsignedMessage = generateMessageToSign(\n      //_destination,\n      //_value,\n      //_tokenAddress,\n      //spendNonce\n    //);\n    //bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n    //return keccak256(abi.encodePacked(prefix, hashedUnsignedMessage));\n  //}\n\n  //function _messageToRecover(\n    //address _destination,\n    //address _tokenAddress,\n    //uint256 _tokenId\n  //)\n  //private view returns (bytes32)\n  //{\n    //bytes32 hashedUnsignedMessage = generateMessageToSign(\n      //_destination,\n      //_tokenAddress,\n      //_tokenId,\n      //spendNonce\n    //);\n    //bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n    //return keccak256(abi.encodePacked(prefix, hashedUnsignedMessage));\n  //}\n\n  //// Confirm the pair of addresses as two distinct owners of this contract.\n  //function _distinctOwners(\n    //address[] memory _addrs\n  //)\n  //private returns (bool)\n  //{\n    //require(_addrs.length == signerNum, \"Invalid number of signer.\");\n\n    //for (uint i = 0; i < _addrs.length; i++) {\n      //require(_addrs[i] != address(0), \"Invalid signature.\");\n      //require(owners[_addrs[i]], \"Signer must be the owner.\");\n      //require(!checkedSigners[_addrs[i]], \"Signing owners must be different.\");\n      //checkedSigners[_addrs[i]] = true;\n    //}\n\n    //// deleting the result\n    //for (uint i = 0; i < _addrs.length; i++) {\n      //delete checkedSigners[_addrs[i]];\n    //}\n\n    //return true;\n  //}\n}\n",
  "sourcePath": "/Users/uchimuraseita/go/src/github.com/jphacks/TK_1907/smart-contract/contracts/ComicAccount.sol",
  "ast": {
    "absolutePath": "/Users/uchimuraseita/go/src/github.com/jphacks/TK_1907/smart-contract/contracts/ComicAccount.sol",
    "exportedSymbols": {
      "ComicAccount": [
        38
      ]
    },
    "id": 39,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.5",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 38,
        "linearizedBaseContracts": [
          38
        ],
        "name": "ComicAccount",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4,
            "name": "initialized",
            "nodeType": "VariableDeclaration",
            "scope": 38,
            "src": "53:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 2,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "53:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "66616c7365",
              "id": 3,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "79:5:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 6,
            "name": "uploader",
            "nodeType": "VariableDeclaration",
            "scope": 38,
            "src": "88:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 5,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "88:15:0",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 8,
            "name": "Initialized",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 7,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "140:2:0"
            },
            "src": "123:20:0"
          },
          {
            "body": {
              "id": 11,
              "nodeType": "Block",
              "src": "168:2:0",
              "statements": []
            },
            "documentation": null,
            "id": 12,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "158:2:0"
            },
            "returnParameters": {
              "id": 10,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "168:0:0"
            },
            "scope": 38,
            "src": "147:23:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 15,
              "nodeType": "Block",
              "src": "248:54:0",
              "statements": []
            },
            "documentation": null,
            "id": 16,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "228:2:0"
            },
            "returnParameters": {
              "id": 14,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "248:0:0"
            },
            "scope": 38,
            "src": "220:82:0",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 36,
              "nodeType": "Block",
              "src": "360:705:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 23,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "374:12:0",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 22,
                          "name": "initialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4,
                          "src": "375:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5468697320636f6e74726163742068617320616c7265616479206265656e20696e697469616c697a65642e",
                        "id": 24,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "388:45:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d41e15039a267b5e7d4f0687e4737ce4bc870fe05a8049192d53401358e9a328",
                          "typeString": "literal_string \"This contract has already been initialized.\""
                        },
                        "value": "This contract has already been initialized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d41e15039a267b5e7d4f0687e4737ce4bc870fe05a8049192d53401358e9a328",
                          "typeString": "literal_string \"This contract has already been initialized.\""
                        }
                      ],
                      "id": 21,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        404,
                        405
                      ],
                      "referencedDeclaration": 405,
                      "src": "366:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 25,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "366:68:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26,
                  "nodeType": "ExpressionStatement",
                  "src": "366:68:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 27,
                    "name": "_uploader",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 18,
                    "src": "481:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 28,
                  "nodeType": "ExpressionStatement",
                  "src": "481:9:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 29,
                      "name": "initialized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4,
                      "src": "1018:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 30,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1032:4:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1018:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 32,
                  "nodeType": "ExpressionStatement",
                  "src": "1018:18:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 33,
                      "name": "Initialized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8,
                      "src": "1047:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1047:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35,
                  "nodeType": "EmitStatement",
                  "src": "1042:18:0"
                }
              ]
            },
            "documentation": null,
            "id": 37,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18,
                  "name": "_uploader",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "326:25:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 17,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "326:15:0",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "325:27:0"
            },
            "returnParameters": {
              "id": 20,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "360:0:0"
            },
            "scope": 38,
            "src": "306:759:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 39,
        "src": "25:8325:0"
      }
    ],
    "src": "0:8351:0"
  },
  "legacyAST": {
    "absolutePath": "/Users/uchimuraseita/go/src/github.com/jphacks/TK_1907/smart-contract/contracts/ComicAccount.sol",
    "exportedSymbols": {
      "ComicAccount": [
        38
      ]
    },
    "id": 39,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.5",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 38,
        "linearizedBaseContracts": [
          38
        ],
        "name": "ComicAccount",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4,
            "name": "initialized",
            "nodeType": "VariableDeclaration",
            "scope": 38,
            "src": "53:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 2,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "53:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "66616c7365",
              "id": 3,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "79:5:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 6,
            "name": "uploader",
            "nodeType": "VariableDeclaration",
            "scope": 38,
            "src": "88:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 5,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "88:15:0",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 8,
            "name": "Initialized",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 7,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "140:2:0"
            },
            "src": "123:20:0"
          },
          {
            "body": {
              "id": 11,
              "nodeType": "Block",
              "src": "168:2:0",
              "statements": []
            },
            "documentation": null,
            "id": 12,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "158:2:0"
            },
            "returnParameters": {
              "id": 10,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "168:0:0"
            },
            "scope": 38,
            "src": "147:23:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 15,
              "nodeType": "Block",
              "src": "248:54:0",
              "statements": []
            },
            "documentation": null,
            "id": 16,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "228:2:0"
            },
            "returnParameters": {
              "id": 14,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "248:0:0"
            },
            "scope": 38,
            "src": "220:82:0",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 36,
              "nodeType": "Block",
              "src": "360:705:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 23,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "374:12:0",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 22,
                          "name": "initialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4,
                          "src": "375:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "5468697320636f6e74726163742068617320616c7265616479206265656e20696e697469616c697a65642e",
                        "id": 24,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "388:45:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d41e15039a267b5e7d4f0687e4737ce4bc870fe05a8049192d53401358e9a328",
                          "typeString": "literal_string \"This contract has already been initialized.\""
                        },
                        "value": "This contract has already been initialized."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d41e15039a267b5e7d4f0687e4737ce4bc870fe05a8049192d53401358e9a328",
                          "typeString": "literal_string \"This contract has already been initialized.\""
                        }
                      ],
                      "id": 21,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        404,
                        405
                      ],
                      "referencedDeclaration": 405,
                      "src": "366:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 25,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "366:68:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26,
                  "nodeType": "ExpressionStatement",
                  "src": "366:68:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 27,
                    "name": "_uploader",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 18,
                    "src": "481:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 28,
                  "nodeType": "ExpressionStatement",
                  "src": "481:9:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 31,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 29,
                      "name": "initialized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4,
                      "src": "1018:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 30,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1032:4:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1018:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 32,
                  "nodeType": "ExpressionStatement",
                  "src": "1018:18:0"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 33,
                      "name": "Initialized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8,
                      "src": "1047:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1047:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35,
                  "nodeType": "EmitStatement",
                  "src": "1042:18:0"
                }
              ]
            },
            "documentation": null,
            "id": 37,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 19,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 18,
                  "name": "_uploader",
                  "nodeType": "VariableDeclaration",
                  "scope": 37,
                  "src": "326:25:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 17,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "326:15:0",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "325:27:0"
            },
            "returnParameters": {
              "id": 20,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "360:0:0"
            },
            "scope": 38,
            "src": "306:759:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 39,
        "src": "25:8325:0"
      }
    ],
    "src": "0:8351:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.12+commit.7709ece9.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-10-26T03:04:51.632Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}